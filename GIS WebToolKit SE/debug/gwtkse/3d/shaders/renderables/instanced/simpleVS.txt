precision highp float;

attribute vec4 aVertexPosition;
attribute vec4 aVertexNormal;
attribute vec3 aVertexTextureCoords;
attribute float aVertexMaterial;
attribute vec4 aVertexColor;

varying vec4 vPosition;
varying vec4 v_LightIntensity;
varying vec4 vTextureLightIntencity;
varying vec3 vTextureCoord;
//глубина (точнее чем FragCoord)
varying vec2 vDepth;

attribute vec3 aVertexOffset;
attribute vec3 aVertexScale;
attribute vec3 aVertexAxis;
attribute float aVertexAngle;

const float POW256_2=65536.;
const float POW256_3=16777216.;
const float UNSCALED_VALUE=1./466.;

const int MAX_MATERIAL_COUNT=60;
//uniform vec4 u_color;
// Устанавливаемые извне униформы
uniform mat4 uMVMatrix;
uniform vec3 uViewPosition;
uniform vec3 uCameraUp;
uniform vec3 uCenterPoint;
uniform bool uForceMaterial;

struct LightInfo
{
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
};
    uniform LightInfo u_Light;

struct MaterialInfo {
  vec4 ADSE;
  vec2 ST;
};
uniform MaterialInfo u_Material[MAX_MATERIAL_COUNT];

//unpacking rgb color values from single float
vec4 unpackColor(float f)
{
    vec3 color;
    color.b = floor(f / 256.0 / 256.0);
    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
    // now we have a vec3 with the 3 components in range [0..255]. Let's normalize it!
    return vec4(color / 255.0,1.);
}

//rotate 'vector' around 'axis' by 'theta' angle
vec3 rotateAroundAxis(vec3 vector, vec3 axis, float theta)
{

    float cosTheta = cos(theta);
    float t = 1.-cosTheta;
    float sinTheta = sin(theta);

    mat3 rotationMatrix=mat3(
        t*axis[0]*axis[0]+cosTheta, t*axis[0]*axis[1]+sinTheta*axis[2], t*axis[0]*axis[2]-sinTheta*axis[1],
        t*axis[0]*axis[1]-sinTheta*axis[2], t*axis[1]*axis[1]+cosTheta, t*axis[1]*axis[2]+sinTheta*axis[0],
        t*axis[0]*axis[2]+sinTheta*axis[1], t*axis[1]*axis[2]-sinTheta*axis[0], t*axis[2]*axis[2]+cosTheta
    );

    return rotationMatrix*vector;
}

// calc light intensity for material
vec4 phong(vec4 p,vec3 viewPos, vec3 n, LightInfo uLight,MaterialInfo material)
{
      vec3 s = normalize(uLight.position - p.xyz);
      vec3 v = normalize(viewPos);
      vec3 r = reflect(-s, n);

      vec4 ambient = uLight.ambient * unpackColor(material.ADSE[0]);
      float sDotN = max(dot(s, n), 0.0);
      vec4 diffuse = uLight.diffuse * unpackColor(material.ADSE[1]) * sDotN;

      vec4 spec = vec4(0.0);

      if (sDotN > 0.0&&material.ST[0]>0.)
      {
        spec = uLight.specular * unpackColor(material.ADSE[2]) * pow(max(dot(r, v), 0.0), material.ST[0]);
      }

      vec4 result=(ambient + diffuse + spec+unpackColor(material.ADSE[3]));
      if(result.a>1.0)
      {
        result.a=material.ST[1];
      }
      else
      {
        result.a*=material.ST[1];
      }

      return result;
}
// calc light intensity for texture
vec4 phongTex(vec4 position, vec3 normal, LightInfo uLight)
{
   vec3 s = normalize(uLight.position - position.xyz);
   vec4 ambient = uLight.ambient;
   float sDotN = max(dot(s, normal), 0.0);
   vec4 diffuse = vec4(uLight.diffuse.rgb * sDotN,1.);
   return clamp(ambient + diffuse,0.,1.);
}

// calc angle between 'currentVector' and 'targetVector'
float calcAngle(in vec3 currentVector, in vec3 targetVector)
{
    return acos(dot(currentVector,targetVector));
}



void main(void)
{

    vec4 vertexOffset=vec4(aVertexOffset,1.);

    // add offset separetly from main matrix
    mat4 vertexOffsetMatrix = mat4(
        1., 0.0, 0.0, 0.0,
        0., 1.0, 0.0, 0.0,
        0., 0.0, 1.0, 0.0,
        vertexOffset.x, vertexOffset.y, vertexOffset.z, 1.0
    );
    mat4 mvMatrix=uMVMatrix*vertexOffsetMatrix;

    // apply scale
    vec3 scale=aVertexScale;
    if(aVertexNormal.w>2.)  //VM_NOSCALE
    {
        vec4 pos = uMVMatrix*vertexOffset;
        scale*=pos.w*UNSCALED_VALUE;
    }
    vec4 position = vec4(scale*aVertexPosition.xyz,1.0);

    // apply rotation
    vec3 normal =aVertexNormal.xyz;
    if(aVertexNormal.w==1.||aVertexNormal.w==4.)    //VM_BYOBSER
    {
        vec3 zUpNorm=normalize(cross(UNITZ,uCameraUp));
        float zUpAngle=calcAngle(UNITZ,uCameraUp);

        vec3 zAxis=normalize(rotateAroundAxis(UNITZ,zUpNorm,zUpAngle));
        vec3 xAxis=normalize(rotateAroundAxis(UNITX,zUpNorm,zUpAngle));

        position.xyz = rotateAroundAxis(position.xyz,zUpNorm,zUpAngle);
        normal = rotateAroundAxis(normal,zUpNorm,zUpAngle);

        vec3 cameraRight=normalize(cross(-normalize(uViewPosition),uCameraUp));

        vec3 xRightNorm=normalize(cross(xAxis,cameraRight));
        float xRightAngle=calcAngle(xAxis,cameraRight);
        if(dot(xRightNorm,zAxis)<0.)
        {
            xRightAngle*=-1.;
        }

        position.xyz = rotateAroundAxis(position.xyz,zAxis,xRightAngle);
        normal = rotateAroundAxis(normal,zAxis,xRightAngle);
    } else if(aVertexNormal.w==2.||aVertexNormal.w==5.) //VM_BYOBSERVER
    {
        vec3 zUp=normalize(aVertexAxis);
        vec3 zUpNorm=normalize(cross(UNITZ,zUp));
        float zUpAngle=calcAngle(UNITZ,zUp);

        vec3 xAxis=normalize(rotateAroundAxis(UNITX,zUpNorm,zUpAngle));

        position.xyz = rotateAroundAxis(position.xyz,zUpNorm,zUpAngle);
        normal = rotateAroundAxis(normal,zUpNorm,zUpAngle);

        vec3 cameraRight=normalize(cross(-normalize(uViewPosition),uCameraUp));

        vec3 xRightNorm=normalize(cross(cameraRight,zUp));

        vec3 xRightProj=normalize(cross(zUp,xRightNorm));

        vec3 xRightProjNorm=normalize(cross(xAxis,xRightProj));

        float xRightAngle=calcAngle(xAxis,xRightProj);
        if(dot(xRightProjNorm,zUp)<0.)
        {
            xRightAngle*=-1.;
        }

        position.xyz = rotateAroundAxis(position.xyz,zUp,xRightAngle);
        normal = rotateAroundAxis(normal,zUp,xRightAngle);
    } else
    {
        vec3 zUp=normalize(aVertexAxis);
        vec3 zUpNorm=normalize(cross(UNITZ,zUp));
        float zUpAngle=calcAngle(UNITZ,zUp);

        position.xyz = rotateAroundAxis(position.xyz,zUpNorm,zUpAngle);
        position.xyz = rotateAroundAxis(position.xyz,zUp,aVertexAngle);
        normal = rotateAroundAxis(normal,zUpNorm,zUpAngle);
        normal = rotateAroundAxis(normal,zUp,aVertexAngle);
    }

    // apply local offset
    position.xyz+=normalize(aVertexAxis)*aVertexPosition.w;

    vec4 clipPosition = mvMatrix * position;

    gl_Position = applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
    vDepth=gl_Position.zw;


    int material=int(aVertexMaterial);
    if(material>=MAX_MATERIAL_COUNT)
    {
        material=0;
    }

    if(uForceMaterial)
    {
        material=0;
    }

    if(material>-1)
    {
        v_LightIntensity = phong(position,-uViewPosition, normal, u_Light, u_Material[material]);
    }
    else
    {
        v_LightIntensity=aVertexColor;
    }

    vTextureCoord=aVertexTextureCoords;
    vTextureLightIntencity=phongTex(position, normal, u_Light);

    vPosition=mvMatrix*vec4(0.,0.,0.,1.);
}
