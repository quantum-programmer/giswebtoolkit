
precision highp float;

varying vec4 vPosition;


attribute vec3 aVertexOffset;
attribute vec3 aVertexScale;


        attribute vec4 uvLifeTimeFrameStart; // uv, lifeTime, frameStart
        attribute vec4 positionStartTime;    // position.xyz, startTime
        attribute vec4 velocityStartSize;    // velocity.xyz, startSize
        attribute vec4 accelerationEndSize;  // acceleration.xyz, endSize
        attribute vec4 spinStartSpinSpeed;   // spinStart.x, spinSpeed.y
        attribute vec4 orientationP;          // orientation quaternion
        attribute vec4 colorMult;            // multiplies color and ramp textures

attribute vec3 aVertexAxis;
attribute float aVertexAngle;

const float POW256_2=65536.;
const float POW256_3=16777216.;
const float UNSCALED_VALUE=1./466.;

const int MAX_MATERIAL_COUNT=60;


        // ps
        uniform vec3 worldVelocity;
        uniform vec3 worldAcceleration;
        uniform float timeRange;
        uniform float time;
        uniform float timeOffset;
        uniform float frameDuration;
        uniform float numFrames;

// Устанавливаемые извне униформы
uniform mat4 uMVMatrix;
uniform vec3 uViewPosition;
uniform vec3 uCameraUp;
uniform vec3 uCenterPoint;
uniform bool uForceMaterial;


        // ps Outgoing variables to fragment shader
        varying vec2 outputTexcoord;
        varying float outputPercentLife;
        varying vec4 outputColorMult;

struct LightInfo
{
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
};

uniform LightInfo u_Light;

struct MaterialInfo {
  vec4 ADSE;
  vec2 ST;
};
uniform MaterialInfo u_Material[MAX_MATERIAL_COUNT];
//unpacking rgb color values from single float
vec4 unpackColor(float f)
{
    vec3 color;
    color.b = floor(f / 256.0 / 256.0);
    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
    // now we have a vec3 with the 3 components in range [0..255]. Let's normalize it!
    return vec4(color / 255.0,1.);
}
// calc angle between 'currentVector' and 'targetVector'
float calcAngle(in vec3 currentVector, in vec3 targetVector)
{
    return acos(dot(currentVector,targetVector));
}
//rotate 'vector' around 'axis' by 'theta' angle
vec3 rotateAroundAxis(vec3 vector, vec3 axis, float theta)
{

    float cosTheta = cos(theta);
    float t = 1.-cosTheta;
    float sinTheta = sin(theta);

    mat3 rotationMatrix=mat3(
        t*axis[0]*axis[0]+cosTheta, t*axis[0]*axis[1]+sinTheta*axis[2], t*axis[0]*axis[2]-sinTheta*axis[1],
        t*axis[0]*axis[1]-sinTheta*axis[2], t*axis[1]*axis[1]+cosTheta, t*axis[1]*axis[2]+sinTheta*axis[0],
        t*axis[0]*axis[2]+sinTheta*axis[1], t*axis[1]*axis[2]-sinTheta*axis[0], t*axis[2]*axis[2]+cosTheta
    );

    return rotationMatrix*vector;
}

// calc light intensity for material
vec4 phong(vec4 p,vec3 viewPos, vec3 n, LightInfo uLight,MaterialInfo material)
{
      vec3 s = normalize(uLight.position - p.xyz);
      vec3 v = normalize(viewPos);
      vec3 r = reflect(-s, n);

      vec4 ambient = uLight.ambient * unpackColor(material.ADSE[0]);
      float sDotN = max(dot(s, n), 0.0);
      vec4 diffuse = uLight.diffuse * unpackColor(material.ADSE[1]) * sDotN;

      vec4 spec = vec4(0.0);

      if (sDotN > 0.0&&material.ST[0]>0.)
      {
        spec = uLight.specular * unpackColor(material.ADSE[2]) * pow(max(dot(r, v), 0.0), material.ST[0]);
      }

      vec4 result=(ambient + diffuse + spec+unpackColor(material.ADSE[3]));
      if(result.a>1.0)
      {
        result.a=material.ST[1];
      }
      else
      {
        result.a*=material.ST[1];
      }

      return result;
}
    // ps




      void main() {
          vec4 vertexOffset=vec4(aVertexOffset,1.);

          // add offset separetly from main matrix
          mat4 vertexOffsetMatrix = mat4(
              1., 0.0, 0.0, 0.0,
              0., 1.0, 0.0, 0.0,
              0., 0.0, 1.0, 0.0,
              //0., 0.0, 0.0, 1.0
              vertexOffset.x, vertexOffset.y, vertexOffset.z, 1.0
          );
          mat4 mvMatrix=uMVMatrix*vertexOffsetMatrix;

          vPosition=mvMatrix*vec4(0.,0.,0.,1.);

        // apply scale
          vec3 scale=aVertexScale;
              vec4 pos = uMVMatrix*vertexOffset;
              scale*=pos.w*UNSCALED_VALUE;
          vec4 position = vec4(scale*positionStartTime.yxz,1.0);
          //vec4 position = vec4(positionStartTime.xyz,1.0);

          //vec2 uv = uvLifeTimeFrameStart.xy;
          vec2 uv = uvLifeTimeFrameStart.yx;
          float lifeTime = uvLifeTimeFrameStart.z;
          float frameStart = uvLifeTimeFrameStart.w;
          float startTime = positionStartTime.w;
          vec3 velocity = (vertexOffsetMatrix * vec4(velocityStartSize.xyz,
                                        0.)).xyz + worldVelocity;


          float startSize = velocityStartSize.w;
          vec3 acceleration = (vertexOffsetMatrix * vec4(accelerationEndSize.xyz,
                                            0.)).xyz + worldAcceleration;
          float endSize = accelerationEndSize.w;
          float spinStart = spinStartSpinSpeed.x;
          float spinSpeed = spinStartSpinSpeed.y;

          float localTime = mod((time - timeOffset - startTime), timeRange);
          float percentLife = localTime / lifeTime;

          float frame = mod(floor(localTime / frameDuration + frameStart),
                            numFrames);
          float uOffset = frame / numFrames;
          float u = uOffset + (uv.x + 0.5) * (1. / numFrames);

          outputTexcoord = vec2(u, uv.y + 0.5);
          outputColorMult = colorMult;

          float size = mix(startSize, endSize, percentLife);
          size = (percentLife < 0. || percentLife > 1.) ? 0. : size;
          float s = sin(spinStart + spinSpeed * localTime);
          float c = cos(spinStart + spinSpeed * localTime);

          vec4 rotatedPoint = vec4((uv.x * c + uv.y * s) * size, 0.,
                                   (uv.x * s - uv.y * c) * size, 1.);
        vec3 zUp=normalize(aVertexAxis);
        vec3 zUpNorm=normalize(cross(UNITZ,zUp));
        float zUpAngle=calcAngle(UNITZ,zUp);

        velocity.xyz = rotateAroundAxis(velocity.xyz,zUpNorm,zUpAngle);
        acceleration.xyz = rotateAroundAxis(acceleration.xyz,zUpNorm,zUpAngle);
          vec3 center = velocity * localTime +
                        acceleration * localTime * localTime +
                        positionStartTime.xyz;

          vec4 q2 = orientationP + orientationP;
          vec4 qx = orientationP.xxxw * q2.xyzx;
          vec4 qy = orientationP.xyyw * q2.xyzy;
          vec4 qz = orientationP.xxzw * q2.xxzz;

          mat4 localMatrix =
          mat4(
              (1.0 - qy.y) - qz.z,
              qx.y + qz.w,
              qx.z - qy.w,
              0,

              qx.y - qz.w,
              (1.0 - qx.x) - qz.z,
              qy.z + qx.w,
              0,

              qx.z + qy.w,
              qy.z - qx.w,
              (1.0 - qx.x) - qy.y,
              0,

              center.x, center.y, center.z, 1);

             rotatedPoint = localMatrix * rotatedPoint;
             outputPercentLife = percentLife;

             vec4 clipPosition = mvMatrix  * rotatedPoint;
             vec4 startPosition  = applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
            gl_Position = clipPosition;
          if (uForceMaterial)
          {
            vec4 v_LightIntensity = phong(position,-uViewPosition, uCameraUp, u_Light, u_Material[0]);
          }
}
