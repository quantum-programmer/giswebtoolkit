attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aTextureCoord;

// Устанавливаемые извне униформы
uniform mat4 uMVMatrix;

uniform vec3 uCenterPoint;

uniform float uFog;

struct LightInfo {
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
};
uniform LightInfo u_Light;

vec4 phongTex(vec4 position, vec3 normal, LightInfo uLight)
     {
        vec3 s = normalize(uLight.position - position.xyz);
        vec4 ambient = uLight.ambient;
        float sDotN = max(dot(s, normal), 0.0);
        vec4 diffuse = vec4(uLight.diffuse.rgb * sDotN,1.);
        return clamp(ambient + diffuse,0.,1.);
     }

// Изменяемые между шейдерами переменные текстурных координат и освещенности
varying vec2 vTextureCoord;
varying vec4 vTextureLightIntencity;

varying vec2 vDepth;
// Фактор тумана
varying float fogFactor;
// Координаты в единичной 3D-системе для расчета тумана

void main(void){
    // Заполнение системной переменной вектора координат вершины
    vec4 position = vec4(aVertexPosition, 1.0);

    vec4 clipPosition = uMVMatrix * position;
    gl_Position=applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
    vTextureCoord = aTextureCoord;
    // Определение коэффициента тумана
    if(uFog>0.){
        float dist =sqrt(pow(-1.0-gl_Position.z,2.0)+pow(0.0-gl_Position.y,2.0)+pow(0.0-gl_Position.x,2.0))-10.67*uFog;
        fogFactor = exp2(-uFog * dist); // 2^(-uFog^3*x^3);
        fogFactor = clamp(fogFactor, 0.0, 1.0);
    }
    else{
        fogFactor=2.;
    }

    if(length(aVertexNormal)==0.)
    {
        vTextureLightIntencity=vec4(1.);
    }
    else
    {
        vTextureLightIntencity=phongTex(vec4(uCenterPoint+aVertexPosition,1.), aVertexNormal, u_Light);
    }

    vDepth=gl_Position.zw;

}
