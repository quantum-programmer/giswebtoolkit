attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec4 aVertexColor;
varying vec4 currentColor;

uniform mat4 uMVMatrix;
uniform float uTransparent;
uniform vec3 uCenterPoint;


struct LightInfo {
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
    };
     uniform LightInfo u_Light;

 vec4 phongTex(vec4 position, vec3 normal, LightInfo uLight)
     {
        vec3 s = normalize(uLight.position - position.xyz);
        vec4 ambient = uLight.ambient;
        float sDotN = max(dot(s, normal), 0.0);
        vec4 diffuse = vec4(uLight.diffuse.rgb * sDotN,1.);
        return clamp(ambient + diffuse,0.,1.);
     }

void main()
{
    vec4 clipPosition = uMVMatrix*vec4(aVertexPosition,1.);
    gl_Position = applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
    currentColor=aVertexColor;

    vec3 vertexNormal=vec3(1.);
    if(length(aVertexNormal)==0.)
    {
        vertexNormal=vec3(0.,0.,1.);
    }
    else
    {
        vertexNormal=normalize(aVertexNormal);
    }

    currentColor*=phongTex(vec4(uCenterPoint+aVertexPosition,1.), vertexNormal, u_Light);

    currentColor.a*=uTransparent;

    gl_PointSize=4.;
}