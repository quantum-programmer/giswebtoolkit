precision mediump float;
varying vec4 v_LightIntensity;
varying vec4 vTextureLightIntencity;
varying vec3 vTextureCoord;

//Текстура тайла
uniform sampler2D uSampler0;
// Флаг рисования текстуры
uniform bool uTextureFlag;


//Режим отрисовки глубины
uniform bool uDepthMode;

//глубина (точнее чем FragCoord)
varying vec2 vDepth;

//varying vec3 worldPosition;
//varying vec3 positionToLight;
//varying vec3 positionToEye;

//uniform vec3 u_globeOneOverRadiiSquared;

//uniform vec4 og_diffuseSpecularAmbientShininess;


//float LightIntensity(vec3 normal, vec3 toLight, vec3 toEye, vec4 diffuseSpecularAmbientShininess)
//{
//    vec3 toReflectedLight = reflect(-toLight, normal);
//
//    float diffuse = max(dot(toLight, normal), 0.0);
//    float specular = max(dot(toReflectedLight, toEye), 0.0);
//    specular = pow(specular, diffuseSpecularAmbientShininess.w);
//
//    return (diffuseSpecularAmbientShininess.x * diffuse) +
//            (diffuseSpecularAmbientShininess.y * specular) +
//            diffuseSpecularAmbientShininess.z;
//}

//vec3 GeodeticSurfaceNormal(vec3 positionOnEllipsoid, vec3 oneOverEllipsoidRadiiSquared)
//{
//    return normalize(positionOnEllipsoid * oneOverEllipsoidRadiiSquared);
//}
vec4 packDepth(highp float depth)
{
    highp vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
    return enc;
}

void main()
{

 if(!uDepthMode){
vec4 color=v_LightIntensity;
if(uTextureFlag){
    vec4 intencityTexture=vec4(float(vTextureLightIntencity.r),float(vTextureLightIntencity.g),float(vTextureLightIntencity.b),float(vTextureLightIntencity.a));
    vec4 textureColor=vTextureLightIntencity*texture2D(uSampler0, vTextureCoord.xy);
    if(vTextureCoord.z>0.99){
        float alpha =  textureColor.a;
        if(textureColor.rgb==vec3(0.)){
          alpha=0.;
        }
        color.rgb=(1.-alpha)*color.rgb+alpha*textureColor.rgb;// GL_DECAL
        if(color.a==0.){
            color.a=alpha;
        }
    }
    else{
        color=textureColor;
    }
}

 if(color.a < 0.05){
        discard;
    }

 gl_FragColor = color;
}
 else
     {
             highp float depth=0.5*(vDepth.x/vDepth.y)+0.5;
             gl_FragColor=packDepth(depth);
     }
}
