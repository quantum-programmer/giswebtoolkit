attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec3 aVertexTextureCoords;
attribute float aVertexMaterial;

//varying vec3 positionToLight;
//varying vec3 positionToEye;
varying vec4 v_LightIntensity;
varying vec4 vTextureLightIntencity;
varying vec3 vTextureCoord;
uniform vec3 uViewPosition;
uniform vec3 uCenterPoint;
uniform bool uForceMaterial;

const float POW256_2=65536.;
const float POW256_3=16777216.;
const int MAX_MATERIAL_COUNT=60;

uniform mat4 uMVMatrix;
//uniform vec3 og_cameraEye;
//uniform vec3 og_cameraLightPosition;

//глубина (точнее чем FragCoord)
varying vec2 vDepth;
struct LightInfo {
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
    };
     uniform LightInfo u_Light;
    struct MaterialInfo {
      vec4 ADSE;
      vec2 ST;
    };
    uniform MaterialInfo u_Material[MAX_MATERIAL_COUNT];

     vec4 unpackColor(float f) {
            vec3 color;
            color.b = floor(f / 256.0 / 256.0);
            color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
            color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
            // now we have a vec3 with the 3 components in range [0..255]. Let's normalize it!
            return vec4(color / 255.0,1.);
     }

     vec4 phong(vec4 p,vec3 viewPos, vec3 n, LightInfo uLight,MaterialInfo material) {
           vec3 s = normalize(uLight.position - p.xyz);
           vec3 v = normalize(viewPos);
           vec3 r = reflect(-s, n);

           vec4 ambient = uLight.ambient * unpackColor(material.ADSE[0]);
           float sDotN = max(dot(s, n), 0.0);
           vec4 diffuse = uLight.diffuse * unpackColor(material.ADSE[1]) * sDotN;

           vec4 spec = vec4(0.0);

           if (sDotN > 0.0&&material.ST[0]>0.) {
             spec = uLight.specular * unpackColor(material.ADSE[2]) * pow(max(dot(r, v), 0.0), material.ST[0]);
           }


           return clamp(ambient + diffuse + spec+unpackColor(material.ADSE[3]),0.,1.)*vec4(1.,1.,1.,material.ST[1]);
     }

     vec4 phongTex(vec4 position, vec3 normal, LightInfo uLight)
     {
        vec3 s = normalize(uLight.position - position.xyz);
        vec4 ambient = uLight.ambient;
        float sDotN = max(dot(s, normal), 0.0);
        vec4 diffuse = vec4(uLight.diffuse.rgb * sDotN,1.);
        return clamp(ambient + diffuse,0.,1.);
     }


void main()
{

    vec4 clipPosition = uMVMatrix*vec4(aVertexPosition,1.);
    gl_Position = applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
    vDepth=gl_Position.zw;

    int material=int(aVertexMaterial);
        if(material>=MAX_MATERIAL_COUNT){
            material=0;
        }
        if(uForceMaterial)
        {
            material=0;
        }
        if(material>=0){
            v_LightIntensity = phong(vec4(uCenterPoint+aVertexPosition,1.),-uViewPosition, aVertexNormal, u_Light, u_Material[material]);
        }
        else{
            v_LightIntensity=vec4(0.);
        }


    vTextureCoord=aVertexTextureCoords;

    vTextureLightIntencity=phongTex(vec4(uCenterPoint+aVertexPosition,1.), aVertexNormal, u_Light);

//    worldPosition = aVertexPosition.xyz;
//    positionToLight = og_cameraLightPosition - worldPosition;
//    positionToEye = og_cameraEye - worldPosition;
}
