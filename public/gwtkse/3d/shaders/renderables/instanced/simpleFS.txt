precision mediump float;
// Изменяемые между шейдерами переменные текстурных координат, освещенности, цвета вершины
varying vec4 vPosition;
varying vec4 v_LightIntensity;
varying vec4 vTextureLightIntencity;
varying vec3 vTextureCoord;
//глубина (точнее чем FragCoord)
varying vec2 vDepth;

//Текстура тайла
uniform sampler2D uSampler0;
uniform sampler2D uDepthSampler;

//Режим отрисовки глубины
uniform bool uDepthMode;

// Устанавливаемое извне свойство степени прозрачности
//uniform float uTransparent;

// Флаг рисования текстуры
uniform bool uTextureFlag;

// Флаг использования текстуры глубины
uniform bool uDepthTextureFlag;
#define DepthTemplate vec4(1., 1. / 255., 1. / 65025., 1. / 16581375.)

vec4 packDepth(highp float depth)
{
    highp vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
    return enc;
}

void main()
{
    vec4 color;
    if(!uDepthMode)
    {
        color=v_LightIntensity;
        if(uTextureFlag)
        {
        //    vec4 intencityTexture=vec4(float(vTextureLightIntencity.r),float(vTextureLightIntencity.g),float(vTextureLightIntencity.b),float(vTextureLightIntencity.a));
            vec4 textureColor=vTextureLightIntencity*texture2D(uSampler0, vTextureCoord.xy);
            if(vTextureCoord.z==1.)
            {
                color.rgb=(1.-textureColor.a)*color.rgb+textureColor.a*textureColor.rgb;// GL_DECAL
            }
            else
            {
                color=textureColor;
            }
        }

        if(color.a<0.05)
        {
            discard;
        }

        if(uDepthTextureFlag&&vPosition.z<3000.)
        {

            highp float delta=abs(0.01/vPosition.w);
            vec2 textureCoord=vPosition.xy/(2.*vPosition.w)+vec2(0.5);

            vec4 depthTextureColor=texture2D(uDepthSampler, textureCoord.xy);
            highp float textureDepth = dot(depthTextureColor, vec4(1., 1. / 255., 1. / 65025., 1. / 16581375.));
            highp float depth=0.5*(vPosition.z/vPosition.w)+0.5;

            if(depth-textureDepth>delta)
            {
                color.a*=0.1;
            }
        }
    }
    else
    {
        highp float depth=0.5*(vDepth.x/vDepth.y)+0.5;
        color=packDepth(depth);
    }

    gl_FragColor = color;
}
