attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
// Устанавливаемые извне униформы
uniform mat4 uMVMatrix;

uniform vec3 uCenterPoint;
uniform vec3 uViewPosition;



uniform float uFog;

// Изменяемые между шейдерами переменные текстурных координат и освещенности
varying vec4 v_LightIntensity;

varying vec2 vDepth;
// Фактор тумана
varying float fogFactor;
// Координаты в единичной 3D-системе для расчета тумана

struct LightInfo {
      vec3 position;
      vec4 ambient;
      vec4 diffuse;
      vec4 specular;
    };
uniform LightInfo u_Light;

struct MaterialInfo {
      vec4 ADSE;
      vec2 ST;
};
uniform MaterialInfo u_Material;
     vec4 unpackColor(float f) {
            vec3 color;
            color.b = floor(f / 256.0 / 256.0);
            color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
            color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
            // now we have a vec3 with the 3 components in range [0..255]. Let's normalize it!
            return vec4(color / 255.0,1.);
     }

     vec4 phong(vec4 p,vec3 viewPos, vec3 n, LightInfo uLight,MaterialInfo material) {
                vec3 s = normalize(uLight.position - p.xyz);
                vec3 v = normalize(viewPos);
                vec3 r = reflect(-s, n);

                vec4 ambient = uLight.ambient * unpackColor(material.ADSE[0]);
                float sDotN = max(dot(s, n), 0.0);
                vec4 diffuse = uLight.diffuse * unpackColor(material.ADSE[1]) * sDotN;

                vec4 spec = vec4(0.0);

                if (sDotN > 0.0&&material.ST[0]>0.) {
                  spec = uLight.specular * unpackColor(material.ADSE[2]) * pow(max(dot(r, v), 0.0), material.ST[0]);
                }


                return clamp(ambient + diffuse + spec+unpackColor(material.ADSE[3]),0.,1.)*vec4(1.,1.,1.,material.ST[1]);
          }



void main(void){
    // Заполнение системной переменной вектора координат вершины
    vec4 position = vec4(aVertexPosition, 1.0);

    vec4 clipPosition = uMVMatrix * position;
    gl_Position=applyLogarithmicDepth(clipPosition, u_logarithmicDepth, uFcoef);
    // Определение коэффициента тумана
    if(uFog>0.){
        float dist =sqrt(pow(-1.0-gl_Position.z,2.0)+pow(0.0-gl_Position.y,2.0)+pow(0.0-gl_Position.x,2.0))-10.67*uFog;
        fogFactor = exp2(-uFog * dist); // 2^(-uFog^3*x^3);
        fogFactor = clamp(fogFactor, 0.0, 1.0);
    }
    else{
        fogFactor=2.;
    }

    vec3 vertexNormal=vec3(1.);
    if(length(aVertexNormal)==0.)
    {
        vertexNormal=normalize(u_Light.position.xyz - (uCenterPoint+aVertexPosition));
    }
    else
    {
        vertexNormal=normalize(aVertexNormal);
    }
    v_LightIntensity = phong(vec4(uCenterPoint+aVertexPosition,1.),-uViewPosition,vertexNormal, u_Light, u_Material);

    vDepth=gl_Position.zw;
}
