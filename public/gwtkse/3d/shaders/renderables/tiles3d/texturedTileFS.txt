precision mediump float;
//Текстура тайла
uniform sampler2D uSampler0;

// Изменяемые между шейдерами переменные текстурных координат, освещенности, цвета вершины
varying vec2 vTextureCoord;
varying vec4 vTextureLightIntencity;

// Фактор тумана
varying float fogFactor;

//глубина (точнее чем FragCoord)
varying vec2 vDepth;
// Устанавливаемое извне свойство степени прозрачности
uniform float uTransparent;
// Цвет фигуры
uniform vec4 uShapeColor;
// Флаг рисования текстуры
uniform bool uFlagTex0;
//Режим отрисовки глубины
uniform bool uDepthMode;

// Цвет тумана
const vec4 Fogcolor = vec4(1.0,1.0,1.0,1.0);

vec4 packDepth(highp float depth)
{
    highp vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
    return enc;
}

void main(void)
{
if(!uDepthMode){
 vec3 colorTotal = uShapeColor.rgb;
 float alfaChanel=uShapeColor.a;
 if (uFlagTex0) {
    vec4 textureColor0 = texture2D(uSampler0, vTextureCoord);
    alfaChanel = textureColor0.a;
	float a1 = textureColor0.a;
    float a2 = 1.0 - a1;
    colorTotal.r = colorTotal.r * a2 + textureColor0.r * a1;
    colorTotal.g = colorTotal.g * a2 + textureColor0.g * a1;
    colorTotal.b = colorTotal.b * a2 + textureColor0.b * a1;
 }
 if(alfaChanel < 0.05){
    discard;
 }
 alfaChanel*=uTransparent;

 gl_FragColor = vec4(colorTotal* vTextureLightIntencity.xyz,alfaChanel);
 if(fogFactor<=1.){
    gl_FragColor = mix(Fogcolor, gl_FragColor, fogFactor); // = x * ( 1.0 - fogFactor ) + y * fogFactor
 }


}
else
{
    highp float depth=0.5*(vDepth.x/vDepth.y)+0.5;
    gl_FragColor=packDepth(depth);
}
}
